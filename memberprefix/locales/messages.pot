#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-06 11:38+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: redgettext 3.4.2\n"

#: memberprefix.py:18
#, docstring
msgid "A cog to allow a member to choose custom prefixes, just for them!"
msgstr ""

#: memberprefix.py:87
#, docstring
msgid ""
"Sets [botname]'s prefix(es) for you only.\n"
"        Warning: This is not additive. It will replace all current prefixes.\n"
"        The real prefixes will no longer work for you.\n"
"\n"
"        **Examples:**\n"
"            - `[p]memberprefix !`\n"
"            - `[p]memberprefix \"! \"` - Quotes are needed to use spaces in prefixes.\n"
"            - `[p]memberprefix ! ? .` - Sets multiple prefixes.\n"
"        **Arguments:**\n"
"            - `<prefixes...>` - The prefixes the bot will respond for you only.\n"
"        "
msgstr ""

#: memberprefix.py:99
msgid ""
"A prefix is above the maximal length (10 characters).\n"
"This is possible for global or per-server prefixes, but not for per-member prefixes."
msgstr ""

#: memberprefix.py:103
msgid "Prefix for you only set."
msgstr ""

#: memberprefix.py:105
msgid "Prefixes for you only set."
msgstr ""

#: memberprefix.py:108
#, docstring
msgid ""
"|coro|\n"
"        Returns the invocation context from the message.\n"
"        This is a more low-level counter-part for :meth:`.process_commands`\n"
"        to allow users more fine grained control over the processing.\n"
"        The returned context is not guaranteed to be a valid invocation\n"
"        context, :attr:`.Context.valid` must be checked to make sure it is.\n"
"        If the context is not valid then it is not a valid candidate to be\n"
"        invoked under :meth:`~.Bot.invoke`.\n"
"        Parameters\n"
"        -----------\n"
"        message: :class:`discord.Message`\n"
"            The message to get the invocation context from.\n"
"        cls\n"
"            The factory class that will be used to create the context.\n"
"            By default, this is :class:`.Context`. Should a custom\n"
"            class be provided, it must be similar enough to :class:`.Context`\\'s\n"
"            interface.\n"
"        Returns\n"
"        --------\n"
"        :class:`.Context`\n"
"            The invocation context. The type of this can change via the\n"
"            ``cls`` parameter.\n"
"        "
msgstr ""
